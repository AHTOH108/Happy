package com.iandp.happy.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.iandp.happy.database.DBCost;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBCOST".
*/
public class DBCostDao extends AbstractDao<DBCost, Long> {

    public static final String TABLENAME = "DBCOST";

    /**
     * Properties of entity DBCost.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Price = new Property(1, Double.class, "price", false, "PRICE");
        public final static Property PriceMax = new Property(2, Double.class, "priceMax", false, "PRICE_MAX");
        public final static Property Date = new Property(3, Long.class, "date", false, "DATE");
        public final static Property Amount = new Property(4, Double.class, "amount", false, "AMOUNT");
        public final static Property TypeAmount = new Property(5, Byte.class, "typeAmount", false, "TYPE_AMOUNT");
        public final static Property ShopId = new Property(6, long.class, "shopId", false, "SHOP_ID");
        public final static Property ProductId = new Property(7, long.class, "productId", false, "PRODUCT_ID");
    };

    private DaoSession daoSession;

    private Query<DBCost> dBProduct_CostsQuery;

    public DBCostDao(DaoConfig config) {
        super(config);
    }
    
    public DBCostDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBCOST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PRICE\" REAL," + // 1: price
                "\"PRICE_MAX\" REAL," + // 2: priceMax
                "\"DATE\" INTEGER," + // 3: date
                "\"AMOUNT\" REAL," + // 4: amount
                "\"TYPE_AMOUNT\" INTEGER," + // 5: typeAmount
                "\"SHOP_ID\" INTEGER NOT NULL ," + // 6: shopId
                "\"PRODUCT_ID\" INTEGER NOT NULL );"); // 7: productId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBCOST\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBCost entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(2, price);
        }
 
        Double priceMax = entity.getPriceMax();
        if (priceMax != null) {
            stmt.bindDouble(3, priceMax);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date);
        }
 
        Double amount = entity.getAmount();
        if (amount != null) {
            stmt.bindDouble(5, amount);
        }
 
        Byte typeAmount = entity.getTypeAmount();
        if (typeAmount != null) {
            stmt.bindLong(6, typeAmount);
        }
        stmt.bindLong(7, entity.getShopId());
        stmt.bindLong(8, entity.getProductId());
    }

    @Override
    protected void attachEntity(DBCost entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBCost readEntity(Cursor cursor, int offset) {
        DBCost entity = new DBCost( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // price
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // priceMax
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // date
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // amount
            cursor.isNull(offset + 5) ? null : (byte) cursor.getShort(offset + 5), // typeAmount
            cursor.getLong(offset + 6), // shopId
            cursor.getLong(offset + 7) // productId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBCost entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPrice(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setPriceMax(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setAmount(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setTypeAmount(cursor.isNull(offset + 5) ? null : (byte) cursor.getShort(offset + 5));
        entity.setShopId(cursor.getLong(offset + 6));
        entity.setProductId(cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBCost entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBCost entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "costs" to-many relationship of DBProduct. */
    public List<DBCost> _queryDBProduct_Costs(long productId) {
        synchronized (this) {
            if (dBProduct_CostsQuery == null) {
                QueryBuilder<DBCost> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProductId.eq(null));
                dBProduct_CostsQuery = queryBuilder.build();
            }
        }
        Query<DBCost> query = dBProduct_CostsQuery.forCurrentThread();
        query.setParameter(0, productId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDBShopDao().getAllColumns());
            builder.append(" FROM DBCOST T");
            builder.append(" LEFT JOIN DBSHOP T0 ON T.\"SHOP_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DBCost loadCurrentDeep(Cursor cursor, boolean lock) {
        DBCost entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DBShop shop = loadCurrentOther(daoSession.getDBShopDao(), cursor, offset);
         if(shop != null) {
            entity.setShop(shop);
        }

        return entity;    
    }

    public DBCost loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DBCost> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DBCost> list = new ArrayList<DBCost>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DBCost> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DBCost> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
