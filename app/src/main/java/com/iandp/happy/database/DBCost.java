package com.iandp.happy.database;

import com.iandp.happy.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "DBCOST".
 */
public class DBCost {

    private Long id;
    private Double price;
    private Double priceMax;
    private Long date;
    private Double amount;
    private Byte typeAmount;
    private long shopId;
    private long productId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBCostDao myDao;

    private DBShop shop;
    private Long shop__resolvedKey;


    public DBCost() {
    }

    public DBCost(Long id) {
        this.id = id;
    }

    public DBCost(Long id, Double price, Double priceMax, Long date, Double amount, Byte typeAmount, long shopId, long productId) {
        this.id = id;
        this.price = price;
        this.priceMax = priceMax;
        this.date = date;
        this.amount = amount;
        this.typeAmount = typeAmount;
        this.shopId = shopId;
        this.productId = productId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBCostDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Double getPrice() {
        return price;
    }

    public void setPrice(Double price) {
        this.price = price;
    }

    public Double getPriceMax() {
        return priceMax;
    }

    public void setPriceMax(Double priceMax) {
        this.priceMax = priceMax;
    }

    public Long getDate() {
        return date;
    }

    public void setDate(Long date) {
        this.date = date;
    }

    public Double getAmount() {
        return amount;
    }

    public void setAmount(Double amount) {
        this.amount = amount;
    }

    public Byte getTypeAmount() {
        return typeAmount;
    }

    public void setTypeAmount(Byte typeAmount) {
        this.typeAmount = typeAmount;
    }

    public long getShopId() {
        return shopId;
    }

    public void setShopId(long shopId) {
        this.shopId = shopId;
    }

    public long getProductId() {
        return productId;
    }

    public void setProductId(long productId) {
        this.productId = productId;
    }

    /** To-one relationship, resolved on first access. */
    public DBShop getShop() {
        long __key = this.shopId;
        if (shop__resolvedKey == null || !shop__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBShopDao targetDao = daoSession.getDBShopDao();
            DBShop shopNew = targetDao.load(__key);
            synchronized (this) {
                shop = shopNew;
            	shop__resolvedKey = __key;
            }
        }
        return shop;
    }

    public void setShop(DBShop shop) {
        if (shop == null) {
            throw new DaoException("To-one property 'shopId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.shop = shop;
            shopId = shop.getId();
            shop__resolvedKey = shopId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
