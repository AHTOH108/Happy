package com.iandp.happy.database;

import java.util.List;
import com.iandp.happy.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "DBPRODUCT".
 */
public class DBProduct {

    private Long id;
    private String brand;
    private String description;
    private Byte rating;
    private long categoryId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBProductDao myDao;

    private DBCategoryProduct categoryProduct;
    private Long categoryProduct__resolvedKey;

    private List<DBImage> images;
    private List<DBCost> costs;

    public DBProduct() {
    }

    public DBProduct(Long id) {
        this.id = id;
    }

    public DBProduct(Long id, String brand, String description, Byte rating, long categoryId) {
        this.id = id;
        this.brand = brand;
        this.description = description;
        this.rating = rating;
        this.categoryId = categoryId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBProductDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getBrand() {
        return brand;
    }

    public void setBrand(String brand) {
        this.brand = brand;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Byte getRating() {
        return rating;
    }

    public void setRating(Byte rating) {
        this.rating = rating;
    }

    public long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(long categoryId) {
        this.categoryId = categoryId;
    }

    /** To-one relationship, resolved on first access. */
    public DBCategoryProduct getCategoryProduct() {
        long __key = this.categoryId;
        if (categoryProduct__resolvedKey == null || !categoryProduct__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBCategoryProductDao targetDao = daoSession.getDBCategoryProductDao();
            DBCategoryProduct categoryProductNew = targetDao.load(__key);
            synchronized (this) {
                categoryProduct = categoryProductNew;
            	categoryProduct__resolvedKey = __key;
            }
        }
        return categoryProduct;
    }

    public void setCategoryProduct(DBCategoryProduct categoryProduct) {
        if (categoryProduct == null) {
            throw new DaoException("To-one property 'categoryId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.categoryProduct = categoryProduct;
            categoryId = categoryProduct.getId();
            categoryProduct__resolvedKey = categoryId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DBImage> getImages() {
        if (images == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBImageDao targetDao = daoSession.getDBImageDao();
            List<DBImage> imagesNew = targetDao._queryDBProduct_Images(id);
            synchronized (this) {
                if(images == null) {
                    images = imagesNew;
                }
            }
        }
        return images;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetImages() {
        images = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DBCost> getCosts() {
        if (costs == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBCostDao targetDao = daoSession.getDBCostDao();
            List<DBCost> costsNew = targetDao._queryDBProduct_Costs(id);
            synchronized (this) {
                if(costs == null) {
                    costs = costsNew;
                }
            }
        }
        return costs;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCosts() {
        costs = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
